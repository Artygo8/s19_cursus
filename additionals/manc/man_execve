execve -- execute a file

#include <unistd.h>

int		execve(const char *path, char *const argv[], char *const envp[]);


DESCRIPTION
execve() transforms the calling process into a new process.  The new
process is constructed from an ordinary file, whose name is pointed to by
path, called the new process file.  This file is either an executable
object file, or a file of data for an interpreter.  An executable object
file consists of an identifying header, followed by pages of data repre-
senting the initial program (text) and initialized data pages.  Addi-
tional pages may be specified by the header to be initialized with zero
data;  see a.out(5).

An interpreter file begins with a line of the form:

 #! interpreter [arg ...]

When an interpreter file is execve()'d, the system runs the specified
interpreter.  If any optional args are specified, they become the first
(second, ...) argument to the interpreter. The name of the originally
execve()'d file becomes the subsequent argument; otherwise, the name of
the originally execve()'d file is the first argument.  The original argu-
ments to the invocation of the interpreter are shifted over to become the
final arguments.  The zeroth argument, normally the name of the
execve()'d file, is left unchanged.

The argument argv is a pointer to a null-terminated array of character
pointers to null-terminated character strings.  These strings construct
the argument list to be made available to the new process.  At least one
argument must be present in the array; by custom, the first element
should be the name of the executed program (for example, the last compo-
nent of path).

The argument envp is also a pointer to a null-terminated array of charac-
ter pointers to null-terminated strings.  A pointer to this array is nor-
mally stored in the global variable environ. These strings pass informa-
tion to the new process that is not directly an argument to the command
(see environ(7)).

File descriptors open in the calling process image remain open in the new
process image, except for those for which the close-on-exec flag is set
(see close(2) and fcntl(2)).  Descriptors that remain open are unaffected
by execve().

Signals set to be ignored in the calling process are set to be ignored in
the new process. Signals which are set to be caught in the calling
process image are set to default action in the new process image.
Blocked signals remain blocked regardless of changes to the signal
action.  The signal stack is reset to be undefined (see sigaction(2) for
more information).

If the set-user-ID mode bit of the new process image file is set (see
chmod(2)), the effective user ID of the new process image is set to the
owner ID of the new process image file.  If the set-group-ID mode bit of
the new process image file is set, the effective group ID of the new
process image is set to the group ID of the new process image file.  (The
effective group ID is the first element of the group list.)  The real
user ID, real group ID and other group IDs of the new process image
remain the same as the calling process image.  After any set-user-ID and
set-group-ID processing, the effective user ID is recorded as the saved
set-user-ID, and the effective group ID is recorded as the saved set-
group-ID.  These values may be used in changing the effective IDs later
(see setuid(2)).

The new process also inherits the following attributes from the calling
process:

	process ID				see getpid(2)
	parent process ID		see getppid(2)
	process group ID		see getpgrp(2)
	access groups			see getgroups(2)
	working directory		see chdir(2)
	root directory			see chroot(2)
	control terminal		see termios(4)
	resource usages			see getrusage(2)
	interval timers			see getitimer(2)
	resource limits			see getrlimit(2)
	file mode mask			see umask(2)
	signal mask				see sigaction(2), sigsetmask(2)

When a program is executed as a result of an execve() call, it is entered
as follows:

	main(argc, argv, envp)
	int argc;
	char **argv, **envp;

where argc is the number of elements in argv (the ``arg count'') and argv
points to the array of character pointers to the arguments themselves.


RETURN VALUES
As the execve() function overlays the current process image  with a new
process image, the successful call has no process to return to.  If
execve() does return to the calling process, an error has occurred; the
return value will be -1 and the global variable errno is set to indicate
the error.


ERRORS
execve() will fail and return to the calling process if:

[E2BIG]		The number of bytes in the new process's argument list is larger
			than the system-imposed limit.  This limit is specified by the
			sysctl(3) MIB variable KERNARGMAX.
[EACCES]	Search permission is denied for a component of the path prefix.
[EACCES]	The new process file is not an ordinary file.
[EACCES]	The new process file mode denies execute permission.
[EACCES]	The new process file is on a filesystem mounted with execution
			disabled (MNTNOEXEC in <sys/mount.h>).
[EFAULT]	The new process file is not as long as indicated by the size values
			in its header.
[EFAULT]	Path, argv, or envp point to an illegal address.
[EIO]		An I/O error occurred while reading from the file system.
[ELOOP]		Too many symbolic links were encountered in translating the
			pathname.  This is taken to be indicative of a looping symbolic
			link.
[ENAMETOOLONG]A component of a pathname exceeded {NAMEMAX} characters, or an
			entire path name exceeded {PATHMAX} characters.
[ENOENT]	The new process file does not exist.
[ENOEXEC]	The new process file has the appropriate access permission, but has
			an unrecognized format (e.g., an invalid magic number in its
			header).
[ENOMEM]	The new process requires more virtual memory than is
			allowed by the imposed maximum (getrlimit(2)).
[ENOTDIR]	A component of the path prefix is not a directory.
[ETXTBSY]	The new process file is a pure procedure (shared text) file that is
			currently open for writing or reading by some process.


CAVEAT
If a program is setuid to a non-super-user, but is executed when the real
uid is ``root'', then the program has some of the powers of a super-user
as well.


RELATED
exit(2), fork(2), execl(3), sysctl(3), environ(7)
