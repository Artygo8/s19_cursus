pipe -- create descriptor pair for interprocess communication

#include <unistd.h>

int		pipe(int fildes[2]);


DESCRIPTION
	The pipe() function creates a pipe (an object that allows unidirectional
	data flow) and allocates a pair of file descriptors.  The first descrip-
	tor connects to the read end of the pipe; the second connects to the
	write end.

	Data written to fildes[1] appears on (i.e., can be read from) fildes[0].
	This allows the output of one program to be sent to another program: the
	source's standard output is set up to be the write end of the pipe; the
	sink's standard input is set up to be the read end of the pipe.  The pipe
	itself persists until all of its associated descriptors are closed.

	A pipe whose read or write end has been closed is considered widowed.
	Writing on such a pipe causes the writing process to receive a SIGPIPE
	signal.  Widowing a pipe is the only way to deliver end-of-file to a
	reader: after the reader consumes any buffered data, reading a widowed
	pipe returns a zero count.

	The generation of the SIGPIPE signal can be suppressed using the
	FSETNOSIGPIPE fcntl command.


RETURN VALUE
	On successful creation of the pipe, zero is returned. Otherwise, a value
	of -1 is returned and the variable errno set to indicate the error.


ERRORS
	The pipe() call will fail if:

	[EFAULT]	The fildes buffer is in an invalid area of the
				process's address space.

	[EMFILE]	Too many descriptors are active.

	[ENFILE]	The system file table is full.

RELATED
	sh(1), fork(2), read(2), socketpair(2), fcntl(2), write(2)
